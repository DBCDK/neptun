plugins {
    id "java"
    id "maven"
    id "pmd"
    id "war"
}

group = "dk.dbc.neptun"
version = "0.1.0"

war.archiveName = "neptun.war"

description = "authentication and configuration service for dbckat"

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    hamcrest_version = "1.3"
    httpclient_version = "0.1.0"
    jackson_version = "2.9.7"
    javaee_api_version = "7.0"
    jaxws_version = "2.5"
    jersey_version = "2.22.2"
    junit_version = "5.1.0"
    maven_surefire_version = "2.20.1"
    maven_war_plugin_version = "3.1.0"
    mockito_version = "2.12.0"
    serviceutils_version = "0.1-SNAPSHOT"
    slf4j_version = "1.7.25"
}

repositories {
     maven { url "http://mavenrepo.dbc.dk/content/groups/public" }
     maven { url "http://repo.maven.apache.org/maven2" }
}

dependencies {
    compile group: "org.slf4j", name: "slf4j-api", version: slf4j_version
    compile group: "org.slf4j", name: "slf4j-simple", version: slf4j_version
    compile group: "com.fasterxml.jackson.core", name: "jackson-databind", version: jackson_version
    compile group: "dk.dbc", name: "serviceutils", version: serviceutils_version
    compile group: "dk.dbc", name: "httpclient", version: httpclient_version
    testCompile group: "org.junit.jupiter", name: "junit-jupiter-api", version: junit_version
    testRuntimeOnly(
        "org.junit.jupiter:junit-jupiter-engine:${junit_version}"
    )
    testCompile group: "org.hamcrest", name: "hamcrest-core", version: hamcrest_version
    testCompile(group: "org.mockito", name: "mockito-core", version: mockito_version) {
        exclude(module: "hamcrest-core")
    }
    providedCompile group: "javax", name: "javaee-api", version: javaee_api_version
    providedCompile group: "org.glassfish.jersey.core", name: "jersey-common", version: jersey_version
    providedCompile group: "org.glassfish.jersey.core", name: "jersey-client", version: jersey_version
    providedCompile group: "org.glassfish.jersey.media", name: "jersey-media-json-jackson", version: jersey_version
}

sourceSets {
    generated {
        java.srcDir "${buildDir}/generated-sources"
    }
    main {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
    test {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
}

task("wsimport") {
    doLast {
        // wsimport fails if the directories don't exist
        def generatedPaths = ["${buildDir}/generated-sources",
            "${buildDir}/classes"]
        generatedPaths.each {path ->
            def file = new File(path)
            if(!file.exists()) {
                file.mkdirs()
            }
        }
        exec {
            executable = "wsimport"
            args = ["-verbose", "-keep", "-s", "${buildDir}/generated-sources",
                "-wsdllocation", "META-INF/wsdl/forsrights.wsdl", "-Xnocompile",
                "-d", "${buildDir}/classes", "-p", "dk.dbc.forsrights.service",
                "src/main/resources/META-INF/wsdl/forsrights.wsdl"]
        }
    }
}

compileJava {
    dependsOn wsimport
    mustRunAfter wsimport
}

test {
    useJUnitPlatform()
}
